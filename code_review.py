import streamlit as st
import openai
import os
from datetime import datetime

# THIS CODE GENERATED BY CLAUDE, REVIEWED AND MODIFIED BY William Elsen, 4-15-2025

# Your OpenAI API key - replace with your actual key
OPENAI_API_KEY = "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"  # Replace this with your actual API key

# Page configuration
st.set_page_config(
    page_title="Code Review Assistant",
    page_icon="ðŸ’»",
    layout="wide"
)

# Initialize OpenAI client
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# Define the system prompt for code review
CODE_REVIEW_PROMPT = """You are an expert code reviewer with deep knowledge across multiple programming languages.
Your task is to review the provided code and give constructive feedback, covering:

1. Code quality issues
2. Potential bugs or edge cases
3. Performance considerations
4. Security vulnerabilities
5. Best practices and style suggestions
6. Architecture and design patterns

Be specific and educational in your feedback. Provide clear examples for improvements where possible.
If the code is generally good, acknowledge its strengths too.
"""

# Sidebar for configuration
with st.sidebar:
    st.title("Code Review Assistant")
    st.markdown("Get professional feedback on your code")
    
    model_options = [
        "gpt-4o",
        "gpt-4o-mini",
        "gpt-4-turbo",
        "gpt-3.5-turbo"
    ]
    
    selected_model = st.selectbox("Select Model:", model_options, index=0)
    
    language = st.selectbox(
        "Programming Language:",
        ["Python", "JavaScript", "TypeScript", "Java", "C#", "C++", "Go", "Ruby", "PHP", "Swift", "Rust", "Other"]
    )
    
    review_focus = st.multiselect(
        "Focus Areas (Optional):",
        ["Performance", "Security", "Readability", "Architecture", "Testing", "Documentation"],
        default=["Performance", "Security", "Readability"]
    )
    
    if st.button("Clear Conversation"):
        st.session_state.messages = []

# Initialize session state for message history
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "system", "content": CODE_REVIEW_PROMPT}]

# Main content area
st.title("ðŸ’» Code Review Bot")
st.markdown("Paste your code below and get professional feedback")

# Display conversation history
for message in st.session_state.messages:
    if message["role"] != "system":  # Don't show system prompts
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# Code input area
with st.expander("Submit Code for Review", expanded=True):
    code_input = st.text_area("Paste your code here:", height=300)
    
    col1, col2 = st.columns(2)
    with col1:
        context = st.text_area("Additional context (optional):", 
                              placeholder="Describe what the code does, any specific concerns, etc.")
    with col2:
        specific_questions = st.text_area("Specific questions (optional):", 
                                        placeholder="Any particular aspects you want feedback on?")
    
    submit = st.button("Submit for Review")

# Process code submission
if submit and code_input:
    # Prepare the user message with code and context
    user_message = f"Please review this {language} code:\n\n```{language.lower()}\n{code_input}\n```"
    
    if context:
        user_message += f"\n\nAdditional context: {context}"
    
    if specific_questions:
        user_message += f"\n\nSpecific questions: {specific_questions}"
    
    if review_focus:
        user_message += f"\n\nPlease focus especially on these areas: {', '.join(review_focus)}"
    
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": user_message})
    
    # Display the user message
    with st.chat_message("user"):
        st.markdown(user_message)
    
    # Call OpenAI API
    try:
        with st.chat_message("assistant"):
            with st.spinner("Analyzing code..."):
                response = client.chat.completions.create(
                    model=selected_model,
                    messages=st.session_state.messages,
                    temperature=0.5,
                    max_tokens=2500
                )
                
                response_content = response.choices[0].message.content
                st.markdown(response_content)
                
                # Add assistant message to chat history
                st.session_state.messages.append({"role": "assistant", "content": response_content})
    except Exception as e:
        st.error(f"An error occurred: {str(e)}")

# Chat input for follow-up questions
follow_up = st.chat_input("Ask follow-up questions about the code review...")

if follow_up:
    # Add follow-up to chat history
    st.session_state.messages.append({"role": "user", "content": follow_up})
    
    # Display the user message
    with st.chat_message("user"):
        st.markdown(follow_up)
    
    # Call OpenAI API for follow-up
    try:
        with st.chat_message("assistant"):
            with st.spinner("Thinking..."):
                response = client.chat.completions.create(
                    model=selected_model,
                    messages=st.session_state.messages,
                    temperature=0.5,
                    max_tokens=1500
                )
                
                response_content = response.choices[0].message.content
                st.markdown(response_content)
                
                # Add assistant message to chat history
                st.session_state.messages.append({"role": "assistant", "content": response_content})
    except Exception as e:
        st.error(f"An error occurred: {str(e)}")

# Footer
st.markdown("---")
st.caption("Code Review Bot â€¢ Powered by OpenAI")

# Tips for getting better reviews
with st.expander("Tips for getting better code reviews"):
    st.markdown("""
    1. **Provide context** - Explain what the code is meant to do
    2. **Ask specific questions** - Direct the review to areas you're concerned about
    3. **Submit complete modules** - Include imports and dependencies
    4. **Format your code properly** - Clean code gets better reviews
    5. **Explain complex logic** - Add comments for particularly tricky parts
    """)